<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang面试题</title>
    <link href="/2021/12/07/Interview/Go/"/>
    <url>/2021/12/07/Interview/Go/</url>
    
    <content type="html"><![CDATA[<h1 id="Go面试题"><a href="#Go面试题" class="headerlink" title="Go面试题"></a>Go面试题</h1><p>[TOC]</p><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a>编程基础</h2><h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><ul><li>是变量名，而非关键字、保留字 可以覆盖（但不建议）</li><li>引用类型的零值</li></ul><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>当<code>slice</code>的容量小于1024时，容量是按照2倍大小增长的。当容量大于1024，增长的容量是原来的1.25倍</p><h4 id="rune类型"><a href="#rune类型" class="headerlink" title="rune类型"></a>rune类型</h4><p>中文长度判断 int32</p><h4 id="new-make区别"><a href="#new-make区别" class="headerlink" title="new/make区别"></a>new/make区别</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">new</span><span class="hljs-params">(Type)</span> *<span class="hljs-title">Type</span></span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">make</span><span class="hljs-params">(t Type, size ...IntegerType)</span> <span class="hljs-title">Type</span></span><br></code></pre></td></tr></table></figure><ul><li>new：用于获取对应类型的指针类型,并进行内存分配置为零值</li><li>make：引用类型的初始化(slice，map、chan) 返回传入的类型,用于引用类型的内存空间分配 </li></ul><ol><li><p>入参不同: </p><p>make( )是slice，map、chan初始化 还可以加长度和容量</p><p>new( )是struct 只接受一个参数</p></li><li><p>返回</p><p>new 返回值是一个指针，指向新分配的该类型的零值,</p><p>make 直接返回的是Type类型值。</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">n1 := <span class="hljs-built_in">make</span>([]A, <span class="hljs-number">5</span>)<br>n2 := <span class="hljs-built_in">make</span>([]*A, <span class="hljs-number">5</span>)<br>n3 := <span class="hljs-built_in">new</span>([]A)<br>n4 := <span class="hljs-built_in">new</span>([]*A)<br><br>fmt.Println(n1, n1[<span class="hljs-number">0</span>]) <span class="hljs-comment">// [&#123; &#125; &#123; &#125; &#123; &#125; &#123; &#125; &#123; &#125;] &#123; &#125;</span><br>fmt.Println(n2, n1[<span class="hljs-number">0</span>]) <span class="hljs-comment">//  [&lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt; &lt;nil&gt;] &#123; &#125;</span><br>fmt.Println(n3)        <span class="hljs-comment">//  &amp;[]</span><br>fmt.Println(n4)        <span class="hljs-comment">//  &amp;[]</span><br><br><br></code></pre></td></tr></table></figure><h4 id="引用类型-值类型"><a href="#引用类型-值类型" class="headerlink" title="引用类型/值类型"></a>引用类型/值类型</h4><ul><li>值类型 int string float bool struct</li><li>引用类型 chanel slice map interface    可以用make初始化</li></ul><p>引用类型需要分配内存空间</p><h4 id="Go是值传递还是引用传递"><a href="#Go是值传递还是引用传递" class="headerlink" title="Go是值传递还是引用传递"></a>Go是值传递还是引用传递</h4><p>全部是值传递，都是一个副本，一个拷贝。</p><p>但是因为拷贝的内容</p><p>有时候是非引用类型（int、string、struct等），这样就在函数中就无法修改原内容数据；</p><p>有的是引用类型（指针、map、slice、chan等），这样就可以修改原内容数据。</p><h4 id="函数导入指针还是值"><a href="#函数导入指针还是值" class="headerlink" title="函数导入指针还是值"></a>函数导入指针还是值</h4><pre><code>  视情况而定 对原数据修改是指针，其他穿值</code></pre><p>​      （有外部调用会有逃逸 无关值类型还是指针类型）</p><h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p>数字默认解析为float64</p><h4 id="触发异常的场景"><a href="#触发异常的场景" class="headerlink" title="触发异常的场景"></a>触发异常的场景</h4><ul><li>空指针解析</li><li>下标越界</li><li>除数为0</li><li>主线程阻塞 死锁 deadelock</li><li>解析错误 未加断言</li><li>调用 panic 函数</li></ul><h4 id="导包顺序-多个init能否执行"><a href="#导包顺序-多个init能否执行" class="headerlink" title="导包顺序/多个init能否执行"></a>导包顺序/多个init能否执行</h4><p>​    执行顺序是按照导入包的顺序执行，而不是按照调用先后顺序执行。</p><p>​    main开始 按顺序导包 import  然后按顺序执行init() 然后执行main函数代码</p><h4 id="多核CPU场景下，cache如何保持一致、不冲突？"><a href="#多核CPU场景下，cache如何保持一致、不冲突？" class="headerlink" title="多核CPU场景下，cache如何保持一致、不冲突？"></a><strong>多核CPU场景下，cache如何保持一致、不冲突？</strong></h4><p>设置状态 </p><h4 id="uint类型溢出"><a href="#uint类型溢出" class="headerlink" title="uint类型溢出"></a><strong>uint类型溢出</strong></h4><p>1-2 = 2^64 -1</p><h4 id="defer-、painc的执行顺序"><a href="#defer-、painc的执行顺序" class="headerlink" title="defer 、painc的执行顺序"></a>defer 、painc的执行顺序</h4><p>defer 的执行顺序是后进先出。当出现 panic 语句的时候，会先按照 defer 的后进先出的顺序执行，最后才会执行panic</p><h4 id="select可以用于什么？"><a href="#select可以用于什么？" class="headerlink" title="select可以用于什么？"></a><strong>select可以用于什么？</strong></h4><p>一个面向channel的 IO 监听操作,常用于gorotine的完美退出</p><h4 id="错误处理是怎么做的"><a href="#错误处理是怎么做的" class="headerlink" title="错误处理是怎么做的?"></a>错误处理是怎么做的?</h4><h4 id="数组扩容实现"><a href="#数组扩容实现" class="headerlink" title="数组扩容实现"></a>数组扩容实现</h4><p>append函数，因为slice底层数据结构是，由数组、len、cap组成，所以，在使用append扩容时，会查看数组后面有没有连续内存快，有就在后面添加，没有就重新生成一个大的数组。</p><h4 id="golang中解析tag是怎么"><a href="#golang中解析tag是怎么" class="headerlink" title="golang中解析tag是怎么"></a>golang中解析tag是怎么</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="编程进阶"><a href="#编程进阶" class="headerlink" title="编程进阶"></a>编程进阶</h2><h4 id="读一个空管道或写一个缓冲已经满的管道，到底会发生什么行为"><a href="#读一个空管道或写一个缓冲已经满的管道，到底会发生什么行为" class="headerlink" title="读一个空管道或写一个缓冲已经满的管道，到底会发生什么行为"></a>读一个空管道或写一个缓冲已经满的管道，到底会发生什么行为</h4><ol><li>发生在非main协程里，则阻塞</li><li>发生在main协程里<br>2.1 没有其他非main协程可以执行，报 fatal error: all goroutines are asleep - deadlock!<br> 　　2.2 有其他非main协程可以执行，则main协程会让他们先执行<br> 　　　　2.2.1 非main协在程执行过程中，帮main协程解除了阻塞<br> 　　　　2.2.2 非main协执行结束后，依然没有帮main协程解除阻塞，则main协程报 fatal error: all goroutines are asleep - deadlock!</li></ol><h4 id="实现的？反射原理是什么？通过反射调用函数‘"><a href="#实现的？反射原理是什么？通过反射调用函数‘" class="headerlink" title="实现的？反射原理是什么？通过反射调用函数‘"></a>实现的？反射原理是什么？通过反射调用函数‘</h4><h4 id="子程-panic-为何没法被父协程-recover"><a href="#子程-panic-为何没法被父协程-recover" class="headerlink" title="子程 panic 为何没法被父协程 recover"></a>子程 panic 为何没法被父协程 recover</h4><p> defer 在多个协程之间是没有效果，在子协程里触发 panic，只能触发自己协程内的 defer，而不能调用 main 协程里的 defer 函数的。</p><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li><p>性能要求高（如用到cgo、文件） 可以加大p的数量runtime.GOMAXPROCS(GOMAXPROCS(0)+1)</p></li><li><p>slice和map的容量初始化: 减少不断加元素时的扩容</p></li><li><p>减少反射 </p><p><code>reflect.Value</code> 会将对象拷贝并分配到堆上，程序中的对象都是消息体，有的消息体会超大，因此会分配较多的堆内存。</p></li><li><p>GOGC=100调大（内存要足够大） 降低gc除非频率 </p><p>golang 的 gc 时机是根据当前与上次的 heap size 的比例来决定</p></li><li><p>一点点拷贝胜过传指针: 对象在栈上分配, 减少GC频率.</p></li><li><p>全局缓存对象有大量的key的情况, value少用指针<br>GC并发Mark需要mark存活的对象, 如果value里指针多, 导致mark消耗的CPU很大, 使用一个struct内嵌数据消除指针.</p></li></ul><h4 id="pprof"><a href="#pprof" class="headerlink" title="pprof"></a><strong>pprof</strong></h4><p>10ms/次收集</p><ul><li>CPU profile：报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li><li>Memory Profile（Heap Profile）：报告程序的内存使用情况</li><li>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈</li><li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的</li></ul><p>runtime/pprof主要用于可结束的代码块，如一次编解码操作等；</p><p>net/http/pprof是对runtime/pprof的二次封装，主要用于不可结束的代码块，如web应用等。</p><ul><li>heap空间分析</li><li>函数执行时间</li><li>svg的文件，用浏览器打开就是火焰图</li></ul><h4 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h4><p>go tool trace，可以看到 p 绑定的 g 实际的 GC 动作和相应时长，以及阻塞时间</p><h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><h4 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h4><p>用于 多个 Goroutine  并发执行等待返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> WaitGroup <span class="hljs-keyword">struct</span> &#123;<br>noCopy noCopy    <span class="hljs-comment">//  保证 sync.WaitGroup 不会被开发者通过再赋值的方式拷贝；</span><br>state1 [<span class="hljs-number">3</span>]<span class="hljs-keyword">uint32</span>  <span class="hljs-comment">// 存储着状态和信号量；</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现超时控制"><a href="#实现超时控制" class="headerlink" title="实现超时控制"></a>实现超时控制</h4><ul><li>time,after</li><li>context.WithTimeout()</li></ul><h4 id="Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？"><a href="#Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？" class="headerlink" title="Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？"></a>Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？</h4><p>悲观锁</p><p>读写都是互斥</p><p>乐观锁本质不是锁 只是 </p><p>乐观锁实现 不能保证先进先出 没法做到线程安全</p><h4 id="Mutex有几种模式？"><a href="#Mutex有几种模式？" class="headerlink" title="Mutex有几种模式？"></a>Mutex有几种模式？</h4><ul><li><p>正常模式</p><ol><li>有抢占的机制 </li><li>被唤起的 Goroutine 与新创建的 Goroutine 竞争(被唤起的 Goroutine大概率会获取不到锁)</li></ol></li><li><p>饥饿模式</p><ol><li>新的 Goroutine 在该状态下不能获取锁、也不会进入自旋状态，它们只会在队列的末尾等待</li><li>严格的先来后到 全部都要排队  直接走队列先进先出 </li><li>饥饿模式的能避免 Goroutine 由于陷入等待无法获取锁而造成的高尾延时。</li></ol></li></ul><h4 id="Mutex什么时候-进入-退出-饥饿模式？"><a href="#Mutex什么时候-进入-退出-饥饿模式？" class="headerlink" title="Mutex什么时候 进入/退出 饥饿模式？"></a>Mutex什么时候 进入/退出 饥饿模式？</h4><blockquote><p>进入饥饿模式</p></blockquote><ul><li>当队列头部超过1ms获取不到锁的时候</li></ul><blockquote><p>退出饥饿模式</p></blockquote><ul><li><p>队列为空</p></li><li><p>队列第一个锁获得时间小于1ms</p></li></ul><h4 id="Mutex可以做自旋锁吗？"><a href="#Mutex可以做自旋锁吗？" class="headerlink" title="Mutex可以做自旋锁吗？"></a>Mutex可以做自旋锁吗？</h4><p> 可以</p><h4 id="项目中用过的锁？"><a href="#项目中用过的锁？" class="headerlink" title="项目中用过的锁？"></a>项目中用过的锁？</h4><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>信号量做并发量限制。</p><h4 id="Go并发控制"><a href="#Go并发控制" class="headerlink" title="Go并发控制"></a>Go并发控制</h4><ul><li>全局共享变量加个互斥锁</li><li>channel通信</li><li>Context包</li></ul><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><h4 id="介绍一下channel"><a href="#介绍一下channel" class="headerlink" title="介绍一下channel"></a><strong>介绍一下channel</strong></h4><p>缓冲</p><ul><li>无缓存,同步,需要先有一个消费者 没有消费者先启动， 会导致死锁阻塞</li><li>有缓冲,异步 基于环形缓存的传统生产者消费者模型；</li></ul><p>csp</p><p>在栈上的一个指向堆上的指针</p><h4 id="channel实现原理"><a href="#channel实现原理" class="headerlink" title="channel实现原理"></a><strong>channel实现原理</strong></h4><p>runtime库里的一个结构体，是一个用于同步和通信的有锁队列</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hchan <span class="hljs-keyword">struct</span> &#123;<br>qcount   <span class="hljs-keyword">uint</span>  <span class="hljs-comment">// Channel 中的元素个数；</span><br>dataqsiz <span class="hljs-keyword">uint</span> <span class="hljs-comment">// Channel 中的循环队列的长度；</span><br>buf      unsafe.Pointer  <span class="hljs-comment">// Channel 的缓冲区数据指针；</span><br>  <br>elemsize <span class="hljs-keyword">uint16</span>   <span class="hljs-comment">// Channel 能够收发的元素大小</span><br>closed   <span class="hljs-keyword">uint32</span><br>elemtype *_type  <span class="hljs-comment">// Channel 能够收发的元素类型</span><br>  <br>sendx    <span class="hljs-keyword">uint</span> <span class="hljs-comment">// Channel 的发送操作处理到的位置；</span><br>recvx    <span class="hljs-keyword">uint</span>  <span class="hljs-comment">//Channel 的接收操作处理到的位置；</span><br>recvq    waitq  <span class="hljs-comment">// 接受等待队列</span><br>sendq    waitq   <span class="hljs-comment">// 发送等待队列</span><br><br>lock mutex <span class="hljs-comment">// 用于保护成员变量的互斥锁 mutex 来保证线程安全,使用互斥锁解决程序中可能存在的线程竞争问题,容易地实现有锁队列。  悲观互斥锁</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> waitq <span class="hljs-keyword">struct</span> &#123;<br>first *sudog<br>last  *sudog<br>&#125; <span class="hljs-comment">// 表示一个在等待列表中的 Goroutine，该结构中存储了两个分别指向前后 runtime.sudog 的指针以构成链表。</span><br></code></pre></td></tr></table></figure><ul><li><p>用于保护成员变量的互斥锁 mutex 来保证线程安全,使用互斥锁解决程序中可能存在的线程竞争问题,容易地实现有锁队列。</p></li><li><p>有缓冲的数组 有字段来标记缓冲的队列长度</p></li><li><p> 双指针 </p></li><li><p>环形队列</p></li></ul><h4 id="channel是否线程安全？"><a href="#channel是否线程安全？" class="headerlink" title="channel是否线程安全？"></a><strong>channel是否线程安全？</strong></h4><ul><li>这个可以看源码就知道channel内部维护了一个互斥锁，来保证线程安全：</li><li>原子操作 </li><li>CSP</li></ul><p> 悲观互斥锁 只有一个goroutine 能拿到这个锁</p><h4 id="Channel分配在栈上还是堆上？"><a href="#Channel分配在栈上还是堆上？" class="headerlink" title="Channel分配在栈上还是堆上？"></a><strong>Channel分配在栈上还是堆上？</strong></h4><p>堆上</p><p>​     </p><h2 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h2><p>调度在计算机中是分配工作所需资源的方法. linux的调度为CPU找到可运行的线程. 而Go的调度是为M(线程)找到P(内存, 执行票据)和可运行的G.</p><h4 id="介绍一下GMP"><a href="#介绍一下GMP" class="headerlink" title="介绍一下GMP"></a>介绍一下GMP</h4><p><strong>G:Goroutine</strong>(用户态轻量线程)</p><ul><li></li><li>栈初始2KB, 调度不涉及系统调用.</li><li>用户函数调用前会检查栈空间是否足够, 不够的话, 会进行栈扩容</li></ul><p>P:Processor(中间逻辑处理调度器)</p><ul><li></li></ul><p>M:Machine Tread（操作系统分配到go的内核线程数）</p><ul><li>p的本地队列为空为自旋线程（过度状态 很快从全局或者work stealing 拿g）</li><li></li></ul><h4 id="GMP线程模型"><a href="#GMP线程模型" class="headerlink" title="GMP线程模型"></a>GMP线程模型</h4><ul><li><p>1:1  协程的创建、删除和切换的都由CPU完成，CPU开销过高</p></li><li><p>1:M  无法利用多核、线程阻塞会导致所有协程阻塞</p></li><li><p>M:N  实现复杂</p></li></ul><h4 id="GMP流程"><a href="#GMP流程" class="headerlink" title="GMP流程"></a>GMP流程</h4><ul><li>初始化 创建G0</li><li>创建goroutine</li><li>放入队列<ul><li>优先本地队列</li><li>本地满了放全局队列</li></ul></li><li>M通过P获取G<ul><li>1/62 全局</li><li>本地队列</li><li>全局队列</li><li>偷其他队列</li></ul></li><li>4.执行</li></ul><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><h4 id="介绍一下goroutine"><a href="#介绍一下goroutine" class="headerlink" title="介绍一下goroutine"></a>介绍一下goroutine</h4><ul><li><strong>内存消耗更少：</strong></li></ul><p>Goroutine所需要的内存通常只有2kb，而线程则需要1Mb（500倍）。最大1GB</p><ul><li><strong>创建与销毁的开销更小</strong></li></ul><p>由于线程创建时需要向操作系统申请资源，并且在销毁时将资源归还，因此它的创建和销毁的开销比较大。相比之下，goroutine的创建和销毁是由go语言在运行时自己管理的，因此开销更低。</p><ul><li><strong>切换开销更小</strong></li></ul><p>这是goroutine于线程的主要区别，也是golang能够实现高并发的主要原因。线程的调度方式是抢占式的，如果一个线程的执行时间超过了分配给它的时间片，就会被其它可执行的线程抢占。在线程切换的过程中需要保存/恢复所有的寄存器信息，比如16个通用寄存器，PC（Program Counter），SP（Stack Pointer），段寄存器等等。</p><p>而goroutine的调度是协同式的，它不会直接地与操作系统内核打交道。当goroutine进行切换的时候，之后很少量的寄存器需要保存和恢复（PC和SP）。因此gouroutine的切换效率更高。</p><h4 id="G0-M0的用途"><a href="#G0-M0的用途" class="headerlink" title="G0/M0的用途"></a>G0/M0的用途</h4><p>G0</p><ul><li><p>M启动后创建的第一个G就是G0，每个M都会有一个自己的G0</p></li><li><p>仅用于负责调度，G0不指向任何可执行的函数。</p></li><li><p>在调度或系统调用时会使用G0的栈空间, 全局变量的G0是M0的G0。</p></li></ul><p>M0</p><ul><li><p>主线程，实例 runtime.m0</p></li><li><p>执行初始化操作和启动第一个G（即G0）， 在之后M0就和其他的M一致。</p></li></ul><h4 id="Goroutine调度顺序"><a href="#Goroutine调度顺序" class="headerlink" title="Goroutine调度顺序"></a>Goroutine调度顺序</h4><ul><li><p>放</p><p>优先放本地队列 —&gt; 满了 —&gt; 全局队列</p></li><li><p>取</p><ol><li><p>第一步，从全局运行队列中寻找goroutine。</p><p>为了保证调度的公平性，每个工作线程每经过61次调度就需要优先尝试从全局运行队列中找出一个goroutine来运行，这样才能保证位于全局运行队列中的goroutine得到调度的机会。全局运行队列是所有工作线程都可以访问的，所以在访问它之前需要加锁。</p></li><li><p>第二步，从工作线程本地运行队列中寻找goroutine。</p><p>如果不需要或不能从全局运行队列中获取到goroutine则从本地运行队列中获取。</p></li><li><p>第三步，从全局运行队列中寻找goroutine。</p></li><li><p>第四步，从其它工作线程的运行队列中偷取goroutine。</p><p>如果上一步也没有找到需要运行的goroutine，则调用findrunnable从其他工作线程的运行队列中偷取goroutine，findrunnable函数在偷取之前会再次尝试从全局运行队列和当前线程的本地运行队列中查找需要运行的goroutine。</p></li></ol></li></ul><h4 id="Goroutine的状态"><a href="#Goroutine的状态" class="headerlink" title="Goroutine的状态"></a>Goroutine的状态</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvyh2um0axj30t108lq4a.jpg" alt="image-20211031142305144"></p><h4 id="Goroutine自旋占用cpu如何解决（go调用、gmp）"><a href="#Goroutine自旋占用cpu如何解决（go调用、gmp）" class="headerlink" title="Goroutine自旋占用cpu如何解决（go调用、gmp）"></a>Goroutine自旋占用cpu如何解决（go调用、gmp）</h4><h4 id="Goroutine抢占时机（gc-栈扫描）"><a href="#Goroutine抢占时机（gc-栈扫描）" class="headerlink" title="Goroutine抢占时机（gc 栈扫描）"></a>Goroutine抢占时机（gc 栈扫描）</h4><p>STW的时候</p><h4 id="goroutine什么时候会发生阻塞"><a href="#goroutine什么时候会发生阻塞" class="headerlink" title="goroutine什么时候会发生阻塞?"></a>goroutine什么时候会发生阻塞?</h4><ol><li><p>由于原子、互斥量或通道操作调用导致  Goroutine  阻塞，调度器将把当前阻塞的 Goroutine 切换出去，重新调度 LRQ 上的其他 Goroutine；</p></li><li><p>由于网络请求和 IO 操作导致  Goroutine  阻塞。</p><p>Go 程序提供了网络轮询器（NetPoller）来处理网络请求和 IO 操作的问题，其后台通过 kqueue（MacOS），epoll（Linux）或  iocp（Windows）来实现 IO 多路复用。通过使用 NetPoller 进行网络系统调用，调度器可以防止  Goroutine  在进行这些系统调用时阻塞 M。这可以让 M 执行 P 的  LRQ  中其他的  Goroutines，而不需要创建新的 M。执行网络系统调用不需要额外的 M，网络轮询器使用系统线程，它时刻处理一个有效的事件循环，有助于减少操作系统上的调度负载。用户层眼中看到的 Goroutine 中的“block socket”，实现了 goroutine-per-connection 简单的网络编程模式。实际上是通过 Go runtime 中的 netpoller 通过 Non-block socket + I/O 多路复用机制“模拟”出来的。</p></li><li><p>当调用一些系统方法的时候（如文件 I/O）</p><p>，如果系统方法调用的时候发生阻塞，这种情况下，网络轮询器（NetPoller）无法使用，而进行系统调用的  G1  将阻塞当前 M1。调度器引入 其它M 来服务 M1 的P。</p></li><li><p>如果在 Goroutine 去执行一个 sleep 操作<br>导致 M 被阻塞了。Go 程序后台有一个监控线程 sysmon，它监控那些长时间运行的 G 任务然后设置可以强占的标识符，别的 Goroutine 就可以抢先进来执行。</p></li></ol><p>Go 中的阻塞分析有助于您分析程序在等待下列阻塞操作上的花费时间：</p><ul><li>select</li><li>chan send</li><li>chan receive</li><li>semacquire ( <code>Mutex.Lock</code>, <code>RWMutex.RLock</code> , <code>RWMutex.Lock</code>, <code>WaitGroup.Wait</code>)</li><li>notifyListWait ( <code>Cond.Wait</code>) 只有当 Go 通过将 goroutine 置于等待状态来暂停执行时，时间才会被跟踪。例如 <code>Mutex.Lock()</code>，如果锁可以立即或通过少量自旋被获得，那么这样的操作将不会出现在您的分析结果中。</li></ul><p>上面的操作是 Go 运行时使用的等待状态的子集，下面的操作将不会出现在分析文件中：</p><ul><li>time.Sleep（但是 time.After, time.Tick 和其他封装了 channel 的操作会显示出来）</li><li>垃圾回收</li><li>系统调用（例如网络 I/O，文件 I/O 等）</li><li>运行时内部锁（例如 stopTheWorld）</li><li>cgo 阻塞调用</li><li>永远阻塞的事件（例如在 nil 通道上发送/接收）</li><li>阻止尚未完成的事件</li></ul><p>在某些场景下， Goroutine Profiling (debug=2) 可能是阻塞分析的一个很好的文档，因为它涵盖了所有等待状态，并且可以显示尚未完成且正在进行的阻塞事件。</p><h4 id="goroutine阻塞了怎么办"><a href="#goroutine阻塞了怎么办" class="headerlink" title="goroutine阻塞了怎么办"></a>goroutine阻塞了怎么办</h4><ul><li><p>原子、互斥量或通道、网络请求和 IO 操作、sleep</p><p>调度器将把当前阻塞的 Goroutine 切换出去，重新调度 LRQ 上的其他 Goroutine</p></li><li><p>当调用一些系统方法的时候 syscall（如文件 I/O），</p><p>而进行系统调用的 G将阻塞当前 M。调度器引入 其它M 来服务 M1 的P。</p></li><li><p>sleep</p><p>Go 程序后台有一个监控线程 sysmon，它监控那些长时间运行的 G 任务然后设置可以强占的标识符，别的 Goroutine 就可以抢先进来执行。</p></li></ul><h4 id="goroutine抢占的还是协作的-怎么实现"><a href="#goroutine抢占的还是协作的-怎么实现" class="headerlink" title="goroutine抢占的还是协作的 怎么实现"></a>goroutine抢占的还是协作的 怎么实现</h4><p>抢占</p><p>sysmon</p><p>当一个协程运行超过 10ms 时，Go 会尝试抢占它。10-20ms</p><h4 id="线程协程映射关系-线程模型"><a href="#线程协程映射关系-线程模型" class="headerlink" title="线程协程映射关系/线程模型"></a>线程协程映射关系/线程模型</h4><ul><li><strong>1:N:</strong>  无法利用多核、线程阻塞会导致所以协程阻塞</li><li><strong>1:1:</strong>  协程的创建、删除和切换的都由CPU完成，CPU开销过高、</li><li><strong>M:N:</strong> 好用但是实现复杂</li></ul><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p>​    上下文的逻辑处理调度器 </p><p>​    每个p有一个自己的本地goroutine队列</p><ol><li><p>复用线程</p></li><li><p>避免频繁销毁创建，提高复用率</p><ul><li><p>work stealing机制</p></li><li><p>当本线程无可运行的G时，尝试从其他线程绑定的P偷取G。</p></li><li><p>hand off机制</p></li><li><p>当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。</p></li></ul></li><li><p>利用并行</p></li><li><p>GOMAXPROCS利用多核CPU</p><ul><li>GOMAXPROCS利用多核CPU</li></ul></li><li><p>抢占策略</p><ul><li><p>goroutine最多占用CPU 10ms，</p></li><li><p>coroutine要等待协程主动释放</p></li></ul></li><li><p>全局队列</p><ul><li>work stealing从其他P偷不到G时，它可以从全局G队列获取</li></ul></li></ol><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><h4 id="Gc的类型"><a href="#Gc的类型" class="headerlink" title="Gc的类型"></a>Gc的类型</h4><ul><li><p>引用计数：对每个对象维护一个引用计数，当引用该对象的对象被销毁时，引用计数减1，当引用计数器为0是回收该对象。</p><ul><li>优点：对象可以很快的被回收，不会出现内存耗尽或达到某个阀值时才回收。</li><li>缺点：不能很好的处理循环引用，而且实时维护引用计数，有也一定的代价。</li><li>代表语言：Python、PHP、Swift</li></ul></li><li><p>标记-清除：从根变量开始遍历所有引用的对象，引用的对象标记为”被引用”，没有被标记的进行回收。</p><ul><li>优点：解决了引用计数的缺点。</li><li>缺点：需要STW，即要暂时停掉程序运行。</li><li>代表语言：Golang(其采用三色标记法)</li></ul></li></ul><h4 id="介绍一下三色标记法"><a href="#介绍一下三色标记法" class="headerlink" title="介绍一下三色标记法"></a>介绍一下三色标记法</h4><p>减少了STW的时间，即时标记，与程序并发执行</p><p><strong>流程</strong></p><ul><li><p>所有对象最开始都是白色.</p></li><li><p>从root对象(栈对象和全局变量)开始找到可达对象，标记为灰色，放入待处理队列。</p></li><li><p>遍历灰色对象队列，将其引用对象标记为灰色放入待处理队列，自身标记为黑色。</p></li><li><p>循环步骤3直到灰色队列为空为止，</p></li><li><p>结束时所有引用对象都被标记为黑色，所有不可达对象为白色，</p></li><li><p>对剩下的白色进行回收</p></li></ul><h4 id="介绍一下混合写屏障"><a href="#介绍一下混合写屏障" class="headerlink" title="介绍一下混合写屏障"></a>介绍一下混合写屏障</h4><p>为了解决误清扫</p><p>​    黑色对象创建新对象会变成白色，而黑色不是灰色一样会被扫描到</p><ul><li><p>原理</p><ul><li>强三色不变式 黑色不允许引用白色</li><li>弱三色不变式 黑色引用白色时白色上层需要有灰色</li></ul></li><li><p>屏障机制</p><ul><li>插入屏障 黑色下游必须为灰色</li><li>删除屏障</li></ul></li><li><p>并发标记和清扫 内存耗尽，挂起程序，清扫所有未被引用的对象</p></li><li><p>非分代和非紧缩</p></li></ul><p> Golang中的混合写屏障满足<code>弱三色不变式</code>，结合了删除写屏障和插入写屏障的优点，只需要在开始时并发扫描各个goroutine的栈，使其变黑并一直保持，</p><h4 id="Gc触发时机"><a href="#Gc触发时机" class="headerlink" title="Gc触发时机"></a>Gc触发时机</h4><ul><li><p><strong>gcTriggerAlways</strong>（废弃）：强制触发GC</p></li><li><p><strong>gcTriggerHeap</strong>：当前分配的内存达到一定阈值时触发，这个阈值在每次GC过后都会根据堆内存的增长情况和CPU占用率来调整</p></li><li><p><strong>gcTriggerTime</strong>：当一定时间没有执行过GC就触发GC（2分钟）</p></li><li><p><strong>gcTriggerCycle</strong>：调用runtime.GC()</p></li></ul><h4 id="Go内存管理方式"><a href="#Go内存管理方式" class="headerlink" title="Go内存管理方式"></a>Go内存管理方式</h4><h4 id="Go哪些对象分配在堆上，哪些对象分配在栈上？"><a href="#Go哪些对象分配在堆上，哪些对象分配在栈上？" class="headerlink" title="Go哪些对象分配在堆上，哪些对象分配在栈上？"></a>Go哪些对象分配在堆上，哪些对象分配在栈上？</h4><p>逃逸分析(escape analysis)，当发现变量的作用域没有跑出函数范围<strong>，</strong>就可以在栈上<strong>，</strong>反之则必须分配在堆。</p><ul><li><p>栈上-局部变量</p></li><li><p>堆上-全局、大内存变量</p></li></ul><h4 id="介绍一下大对象小对象，为什么小对象多了会造成gc压力？"><a href="#介绍一下大对象小对象，为什么小对象多了会造成gc压力？" class="headerlink" title="介绍一下大对象小对象，为什么小对象多了会造成gc压力？"></a>介绍一下大对象小对象<strong>，为什么小对象多了会造成gc压力？</strong></h4><p>​    通常小对象过多会导致GC三色法消耗过多的GPU。优化思路是，减少对象分配</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>类似于TCMalloc的结构  最小8B 最大 32KB</p><h3 id="局部对象是分配到栈上还是分配到堆上，返回一个引用安全吗"><a href="#局部对象是分配到栈上还是分配到堆上，返回一个引用安全吗" class="headerlink" title="局部对象是分配到栈上还是分配到堆上，返回一个引用安全吗"></a>局部对象是分配到栈上还是分配到堆上，返回一个引用安全吗</h3><p>Golang 中的变量只要被引用就会一直存活，Golang 编译器会将函数的局部变量分配到栈帧上，如果编译器不能确保变量return 后不再被引用，那么编译器会将它分配到堆上。<strong>所以这里返回一个引用是安全的。</strong> 并且如果局部变量非常大，那么它需要被分配在堆上而不是栈上。 并且Go 分成了微对象(0，16B)、小对象(16B,32KB)、大对象(32KB ,+∞)，微对象通过微分配器提高分配的性能，大对象会分配到栈上。</p><h4 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h4><ul><li><p>arena</p><p>堆区，go runtime 在动态分配的内存都在这个区域，并且将内存块分成 8kb 的页，一些组合起来的称为 </p></li><li><p>bitmap</p><p>用来标记堆区使用的映射表，它记录了哪些区域保存了对象，对象是否包含指针，以及 GC 的标记信息.</p></li><li><p>spans</p><p>存放 mspan 的指针，根据 spans 区域的信息可以很容易找到 mspan. 它可以在 GC 时更快速的找到的大块的内存 mspan.</p></li></ul><h4 id="堆栈分别存储什么？"><a href="#堆栈分别存储什么？" class="headerlink" title="堆栈分别存储什么？"></a>堆栈分别存储什么？</h4><ul><li><p>栈</p></li><li><p>编译器管理</p><ul><li><p>一级缓存</p></li><li><p>自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上</p></li><li><p>函数调用的局部对象、变量</p></li></ul></li><li><p>堆</p><p>人为管理</p><ul><li><p>二级缓存</p></li><li><p>手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多，GC会回收，引用类型一般都分配到堆上。</p></li><li><p>全局的对象、channel、需要共享的数据、超出分配的内存空间</p></li></ul></li></ul><h4 id="内存逃逸"><a href="#内存逃逸" class="headerlink" title="内存逃逸"></a>内存逃逸</h4><p>编译时确定对象被分配到堆上还是栈上，这个步骤叫逃逸分析</p><ul><li><p>golang程序变量会携带有一组校验数据，用来证明它的整个生命周期是否在运行时完全可知。如果变量通过了这些校验，它就可以在栈上分配。否则就说它 逃逸 了，必须在堆上分配。</p></li><li><p>确认逃逸在编译阶段 确认变量的存放位置（堆还是栈）, 尽量放在栈上</p></li><li><p>全部在堆上</p></li><li><p>垃圾回收（GC）的压力不断增大</p><ul><li>申请、分配、回收内存的系统开销增大（相对于栈）</li><li>动态分配产生一定量的内存碎片</li></ul></li></ul><h4 id="OOM内存溢出"><a href="#OOM内存溢出" class="headerlink" title="OOM内存溢出"></a>OOM内存溢出</h4><p>  pprof，拿到内存分布图</p><p>  gc在标记清除后，不会立马把空闲的内存还给系统，而是等待5分钟后的scvg来释放内存。</p><ul><li><p>  慢增型 http、db、长连接 close</p></li><li><p>突增型 内存泄露或新增大量内存占用的逻辑(例：过长的字符串) </p><p>  go无法分配内存时 throw输出的协程栈pprof调试 结合火焰图, 查看影响性能的热点部分</p></li></ul><p>火焰图</p><ul><li>调用栈,长度代表cpu时长。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="如何实现-deepcopy"><a href="#如何实现-deepcopy" class="headerlink" title="如何实现 deepcopy"></a>如何实现 deepcopy</h4><ul><li><p>深度拷贝可以通过序列化和反序列化来实现，</p><p><code>val := reflect.ValueOf(v)</code> 拿到 <code>v</code> 的反射值</p></li><li><p>也可以基于<code>reflect</code>包的反射机制完成。</p></li></ul><p><a href="https://link.zhihu.com/?target=https://pkg.go.dev/reflect?tab=doc%23DeepEqual">reflect.DeepEqual</a> 检查</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/11/05/alog/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/11/05/alog/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis持久化策略</title>
    <link href="/2021/04/01/redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <url>/2021/04/01/redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis持久化策略"><a href="#Redis持久化策略" class="headerlink" title="Redis持久化策略"></a>Redis持久化策略</h1><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li> 宕机了，Redis如何避免数据丢失？</li><li> AOF 日志是如何实现的？</li><li> AOF日志过大怎么解决？</li><li> AOF 重写会阻塞吗?</li><li> 快照时数据能修改吗?</li><li> 相对比较好的持久化策略</li></ol><p>三点建议：</p><ul><li>数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；</li><li>如果允许分钟级别的数据丢失，可以只使用 RDB；</li><li>如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。</li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>RDB(内存快照): 原理是将Reids在内存中的数据库记录定时dump到磁盘上的RDB持久化。</p><ul><li>相对于大数据集，RDB的启动效率会更高。</li><li>fork出一个子进程同步数据 子进程共享主进程数, 不阻塞主进程数据，主进程在修改数据时会创建副本 子进程读副本，fork创建会阻塞主进程（涉及内存共享）</li></ul><p> Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave。</p><ul><li><strong>save</strong>：在主线程中执行，会导致阻塞；</li><li><strong>bgsave</strong>：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。</li></ul><p><img src="https://static001.geekbang.org/resource/image/4d/cc/4dc5fb99a1c94f70957cce1ffef419cc.jpg" alt="img"></p><p><strong>但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。</strong></p><p>bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。 </p><p>为了快照而暂停写操作，肯定是不能接受的。所以这个时候，Redis 就会借助操作系统提供的写时复制技术（Copy-On-Write, COW），在执行快照的同时，正常处理写操作。</p><h3 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h3><p>AOF原理是将Reids的操作日志以追加的方式写入文件 。</p><ul><li><p>先处理后写，1.避免错误日志 2.不会阻塞操作，3.避免写完日志后宕机</p></li><li><p>通常文件更大、恢复更慢、牺牲部分性能换取更高的缓存一致性</p></li><li><p>AOF 重写不阻塞  后台子进程 bgrewriteaof处理</p></li></ul><p><img src="https://static001.geekbang.org/resource/image/72/f8/72f547f18dbac788c7d11yy167d7ebf8.jpg" alt="img"></p><h4 id="AOF-配置"><a href="#AOF-配置" class="headerlink" title="AOF 配置"></a>AOF 配置</h4><ul><li>Always，同步写回：每个写命令执行完，立马同步地将日志写回磁盘； 影响性能</li><li>Everysec，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；</li><li>No，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</li></ul><h4 id="AOF工作原理"><a href="#AOF工作原理" class="headerlink" title="AOF工作原理"></a>AOF工作原理</h4><p>1、Redis 执行 fork() ，现在同时拥有父进程和子进程。<br>2、子进程开始将新 AOF 文件的内容写入到临时文件。<br>3、对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾,这样样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。<br>4、当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。<br>5、搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</p><h4 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h4><ol><li>auto-aof-rewrite-min-size: 表示运行AOF重写时文件的最小大小，默认为64MB</li><li>auto-aof-rewrite-percentage: 这个值的计算方法是：当前AOF文件大小和上一次重写后AOF文件大小的差值，再除以上一次重写后AOF文件大小。也就是当前AOF文件比上一次重写后AOF文件的增量大小，和上一次重写后AOF文件大小的比值。</li></ol><p>AOF文件大小同时超出上面这两个配置项时，会触发AOF重写。</p><p><img src="https://static001.geekbang.org/resource/image/6b/e8/6b054eb1aed0734bd81ddab9a31d0be8.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里外包（Python）笔试题</title>
    <link href="/2021/03/29/%E9%98%BF%E9%87%8C%E5%A4%96%E5%8C%85/"/>
    <url>/2021/03/29/%E9%98%BF%E9%87%8C%E5%A4%96%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="1-linux"><a href="#1-linux" class="headerlink" title="1.linux"></a>1.linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">ll -h<br>mkdir<br>cd<br>scp<br>htop<br>iftop<br>tail -f app.log<br>vi XX.<br>lsof -i:80<br>ping<br>telnet ip port<br>yum install<br>ps -ef|grep python<br>killall &lt;PROCRESS&gt;<br>kill -9 &lt;PID&gt;<br>ssh root@&lt;HOST&gt;<br>curl &lt;&gt;<br>chmod 777 &lt;&gt;<br>ln -s &lt;&gt; &lt;&gt; <br></code></pre></td></tr></table></figure><p>cat filename.log |grep ‘login’|wc -l</p><h3 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2.SQL"></a>2.SQL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct name from student  where score&gt;95;<br>select count(distinct name)  from student  where score&gt;95;<br>select count(1) as ct,socre from student group by  socre order by ct desc <br></code></pre></td></tr></table></figure><h3 id="3-编码"><a href="#3-编码" class="headerlink" title="3.编码"></a>3.编码</h3><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">array_insert</span>(<span class="hljs-params">array, n</span>):</span><br>    <span class="hljs-keyword">for</span> index, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(array):<br>        <span class="hljs-keyword">if</span> n &lt;= key:<br>            <span class="hljs-keyword">return</span> index<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(array)<br></code></pre></td></tr></table></figure><h4 id="多线程锁及通信"><a href="#多线程锁及通信" class="headerlink" title="多线程锁及通信"></a>多线程锁及通信</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target_a</span>(<span class="hljs-params">counter=<span class="hljs-number">10</span></span>):</span><br>    <span class="hljs-keyword">while</span> counter:<br>        locka.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        lockb.release()<br>        counter -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target_b</span>(<span class="hljs-params">counter=<span class="hljs-number">10</span></span>):</span><br>    <span class="hljs-keyword">while</span> counter:<br>        lockb.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        lockc.release()<br>        counter -= <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">target_c</span>(<span class="hljs-params">counter=<span class="hljs-number">10</span></span>):</span><br>    <span class="hljs-keyword">while</span> counter:<br>        lockc.acquire()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        locka.release()<br>        counter -= <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    locka = threading.Lock()<br>    lockb = threading.Lock()<br>    lockc = threading.Lock()<br><br>    lockb.acquire()<br>    lockc.acquire()<br><br>    t1 = threading.Thread(target=target_a)<br>    t2 = threading.Thread(target=target_b)<br>    t3 = threading.Thread(target=target_c)<br><br>    t1.start()<br>    t2.start()<br>    t3.start()<br></code></pre></td></tr></table></figure><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span>(<span class="hljs-params">lt</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lt) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> lt<br>    mid = lt[<span class="hljs-built_in">len</span>(lt) // <span class="hljs-number">2</span>]<br>    lt.remove(mid)<br>    left_lt, right_lt = [], []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lt:<br>        <span class="hljs-keyword">if</span> i &lt;= mid:<br>            left_lt.append(i)<br>        <span class="hljs-keyword">if</span> i &gt; mid:<br>            right_lt.append(i)<br>    <span class="hljs-keyword">return</span> quick_sort(left_lt) + [mid] + quick_sort(right_lt)<br></code></pre></td></tr></table></figure><h4 id="找两数之和"><a href="#找两数之和" class="headerlink" title="找两数之和"></a>找两数之和</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_sum</span>(<span class="hljs-params">lt, n</span>):</span><br>    dt = &#123;i: e <span class="hljs-keyword">for</span> e, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(lt) <span class="hljs-keyword">if</span> n - i &lt;= i&#125;<br>    res = []<br>    <span class="hljs-keyword">for</span> e, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(lt):<br>        <span class="hljs-keyword">if</span> n - i <span class="hljs-keyword">in</span> dt:<br>            <span class="hljs-keyword">if</span> e != dt[n - i]:<br>                res.append([n - i, i])<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    r = find_sum([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>], <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><h3 id="发散题"><a href="#发散题" class="headerlink" title="发散题"></a>发散题</h3><h4 id="接口耗时长-排查及优化"><a href="#接口耗时长-排查及优化" class="headerlink" title="接口耗时长-排查及优化"></a>接口耗时长-排查及优化</h4><p>time.time()打点找出运行慢的那一块代码，然后具体问题具体分析</p><h5 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h5><ul><li><p><strong>代码bug</strong>: 修bug</p></li><li><p><strong>多个IO请求等待:</strong> 开多线程池请求</p></li><li><p><strong>cpu密集型计算：</strong> 考虑开多进程处理或者c++重写 py调用</p></li><li><p><strong>数据库查询慢:</strong></p><ul><li><p>用explain 看走没走索引 没有的话 对应字段 建索引 force index 强制走索引查询</p></li><li><p>数据库内存 cpu压力不正常 查看占用高的sql 优化 或者升级 </p></li><li><p>查看show processlist 查看是不是有过多或者慢查询占用内存和cpu 再kill</p></li><li><p> ddl语句锁表表结构重构中导致不能查询 </p></li><li><p>sql语句优化 减少like join表  !=，乱建索引，select *</p></li></ul></li></ul><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><ul><li>消息队列 与接口返回无关的一系列操作可以考虑异步 redis或者mq消息队列处理，单生产者接入多消费者</li><li>redis加缓存 </li></ul><h4 id="Url请求返回"><a href="#Url请求返回" class="headerlink" title="Url请求返回"></a>Url请求返回</h4><ol><li>url解析成ip : /etc/hosts + DNS</li><li>网络层 ip协议 arp协议 mac地址查询</li><li>传输层 TCP 连接：TCP 三次握手</li><li>应用层 HTTP 连接: 发送 HTTP 请求</li><li>服务器监听对应端口 处理请求</li><li>nginx负载均衡分发 静态页面直接返回 部分动态页面转发到服务器对应端口</li><li>k8s、docker监听端口处理</li><li>python网关服务器处理(ASGI/WSGI)  uWSGI/gunicorn/uvicorn</li><li>框架处理（flask/django/fastapi）解析http报文 json/text/file返回</li><li>查询redis缓存/mysql</li><li>组装数据并返回 HTTP 报文</li><li>浏览器解析渲染页面/前端直接处理的json/xml数据</li><li>断开连接：TCP 四次挥手</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python面试题</title>
    <link href="/2021/03/27/Interview/Python/"/>
    <url>/2021/03/27/Interview/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="Python面试题"><a href="#Python面试题" class="headerlink" title="Python面试题"></a>Python面试题</h1><p>[TOC]</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="args-kwargs"><a href="#args-kwargs" class="headerlink" title="args/kwargs"></a>args/kwargs</h4><p>args 不定数量的输入参数</p><p>kwargs 不定数量的键值对输入参数</p><p><code>*args</code>必须在<code>**kwargs</code>前面</p><h4 id="创建类-带上project"><a href="#创建类-带上project" class="headerlink" title="创建类 带上project"></a>创建类 带上project</h4><h4 id="生成器-迭代器"><a href="#生成器-迭代器" class="headerlink" title="生成器/迭代器"></a>生成器/迭代器</h4><p>迭代器</p><p>记录计算方法 不实际存储列表数据到内存中，是一种延迟计算方法， range函数实现的就是一种迭代器</p><p>生成器</p><p>本质也是一种迭代器，yield语句</p><ul><li>就是用于迭代操作（for 循环）的对象，何实现了 <code>__next__</code> 方法 </li><li>不需要像列表把所有元素一次性加载到内存，而是以一种延迟计算方式返回元素</li></ul><p>生成器</p><ul><li>函数加上 yiled参数 </li><li>生成器本质上也是一个迭代器</li><li>生成器表达式用（）</li></ul><p><a href="https://docs.python.org/zh-cn/3/glossary.html#term-generator">Generator</a> 是一个用于创建迭代器的简单而强大的工具。 它们的写法类似标准的函数，但当它们要返回数据时会使用 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#yield"><code>yield</code></a> 语句。类似 go里面channel通道接受io、</p><p>迭代器 节省内存, 每次生成一个元素, 而不是先计算出所有的元素, 保存下来.</p><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>解决重复性的操作，功能抽离</p><ul><li>计算函数运行时间</li><li>给函数打日志</li><li>类型检查</li><li>打开db的连接</li></ul><h4 id="is和-的区别"><a href="#is和-的区别" class="headerlink" title="is和 == 的区别"></a>is和 == 的区别</h4><p>is是比较对象的id，而==仅比较对象的值，</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>dict-hashmap</li><li>list-链表</li><li>tuple-</li><li>set</li></ul><h4 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h4><ul><li><p><code>__add__</code></p></li><li><p><code>__dict__</code></p></li></ul><h4 id="下划线开头函数"><a href="#下划线开头函数" class="headerlink" title="下划线开头函数"></a>下划线开头函数</h4><p><code>__init__ / __new__</code></p><ol><li><p>init是初始化方法 实例方法，new是构造方法 静态方法</p></li><li><p>new在init之前执行, 用于创建对象并返回对象（可返回实例如不可变对象）</p></li><li><p>init返回None、new返回对象或者实例</p></li><li><p>绝大多数情况下，我们都不需要自己重写__new__方法，但在当继承一个不可变的类型（例如str类,int类等）时，则需要用到new。</p></li></ol><p><code>__getter__ / __setter__</code></p><h4 id="编码区别"><a href="#编码区别" class="headerlink" title="编码区别"></a>编码区别</h4><ul><li>ascii</li><li>unicode</li><li>Utf-8</li></ul><h4 id="模块查找顺序"><a href="#模块查找顺序" class="headerlink" title="模块查找顺序"></a>模块查找顺序</h4><ul><li>内置的模块（python解释器自带的）</li><li>第三方（开发者编写的模块）</li><li>自定义的模块（自己编写的模块）</li></ul><h4 id="with关键词"><a href="#with关键词" class="headerlink" title="with关键词"></a>with关键词</h4><p>__ENTER</p><p>__END</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h5 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h5><ul><li>N:1，Python协程模式，多个协程在一个线程中切换。在IO密集时切换效率高，但没有用到多核</li><li>协程通信是并发 不会并行 因为在单线程内执行 所以线程安全不需要考虑互斥 </li><li></li></ul><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><ul><li>c扩展</li><li>pypy</li><li>profile查看性能热点</li><li>非cpu密集型用异步、多线程</li><li>火焰图</li><li>profile_line</li><li></li></ul><h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><ul><li>贪婪与非贪婪</li></ul><h4 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h4><ul><li>循环应用导致引用计数无法清零、导致GC无法进行垃圾回收</li><li>函数默认参数使用引用类型(dict、list)</li></ul><p>多线程</p><ul><li>async await</li></ul><p>flask</p><ul><li>context</li></ul><h4 id="存在GIL，为什么还要加现场锁"><a href="#存在GIL，为什么还要加现场锁" class="headerlink" title="存在GIL，为什么还要加现场锁"></a>存在GIL，为什么还要加现场锁</h4><p>GIL的线程安全是针对他自身Cpython的接口、字节码是按顺序执行的 （比如GC的应用计数）</p><p>并非用户态的代码是线程安全的的</p><p>用户的线程是可以切换执行的</p><h4 id="进程-线程-协程"><a href="#进程-线程-协程" class="headerlink" title="进程/线程/协程"></a>进程/线程/协程</h4><p>进程下的多个线程可以共享该进程的所有资源，进程之间相互独立</p><ul><li><strong>多进程</strong>:cpu密集走进程,进程资源开销大，但相对稳定</li><li>**多线程:**io 密集走线程,python 有gil多线程只能发挥单核的性能 </li></ul><p>在CPU密集的程序中，线程有点鸡肋，无法发挥多处理器的效率，这一点可以用进程来做。</p><p>在IO 密集的程序中，大量时间都花在等待IO上，对CPU不敏感，线程可以很好的胜任。</p><h3 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h3><h4 id="字典按key排序"><a href="#字典按key排序" class="headerlink" title="字典按key排序"></a>字典按key排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alist = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">30</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">25</span>&#125;] <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sort_by_age</span>(<span class="hljs-params">list1</span>):</span> <br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(alist,key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">&#x27;age&#x27;</span>],reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="装饰器实现单例"><a href="#装饰器实现单例" class="headerlink" title="装饰器实现单例"></a>装饰器实现单例</h4><h4 id="GC-1"><a href="#GC-1" class="headerlink" title="GC"></a>GC</h4><p>Python内部使用引用计数，来保持追踪内存中的对象，所有对象都有引用计数。</p><p>引用计数增加的情况：</p><p>1，一个对象分配一个新名称</p><p>2，将其放入一个容器中（如列表、元组或字典）</p><p>引用计数减少的情况：</p><p>1，使用del语句对对象别名显示的销毁</p><p>2，引用超出作用域或被重新赋值</p><p>1，当一个对象的引用计数归零时，它将被垃圾收集机制处理掉。</p><p>2，当两个对象a和b相互引用时，del语句可以减少a和b的引用计数，并销毁用于引用底层对象的名称。然而由于每个对象都包含一个对其他对象的应用，因此引用计数不会归零，对象也不会销毁。（从而导致内存泄露）。为解决这一问题，解释器会定期执行一个循环检测器，搜索不可访问对象的循环并删除它们。</p><p>内存溢出问题</p><ol><li><p>对象一直被全局变量所引用, 全局变量生命周期长.</p></li><li><p>垃圾回收机被禁用或者设置成debug状态, 垃圾回收的内存不会被释放.</p></li></ol><h4 id="内存池机制"><a href="#内存池机制" class="headerlink" title="内存池机制"></a>内存池机制</h4><p>Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。</p><p>1，Pymalloc机制。为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。</p><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p> with <code>__enter__</code> 和 <code>__exit__</code> 方法</p><h4 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h4><p>​    相当于类的父类 用于创建类。python所以的东西都是对象，都是从一个类里面创建出来的，type就是python的内建元类。</p><p>django 用元类实现插件化与语法糖</p><h4 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h4><p>​    异步非阻塞，内部可以await 停止做其他的操作比如网络</p><p>​    fastapi</p><h4 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h4><ul><li>约定俗成、不是强制</li></ul><h4 id="装饰器-1"><a href="#装饰器-1" class="headerlink" title="装饰器"></a>装饰器</h4><p>抽离出大量函数中与函数功能本身无关的雷同代码并继续重用</p><ul><li><p>日志</p></li><li><p>资源开销型 with外写</p></li></ul><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><p>current_app 是应用上下文。应用程序运行过程中，保存的一些配置信息，</p><p>request、session 是请求上下文。保存了客户端和服务器交互的数据。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><ul><li><p>装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleton</span>(<span class="hljs-params">cls</span>):</span> <br>instances = &#123;&#125; <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):</span> <br><span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances: <br>instances[cls] = cls(*args, **kwargs) <br>        <span class="hljs-keyword">return</span> instances[cls] <br>    <span class="hljs-keyword">return</span> wrapper <br><br><span class="hljs-meta">@singleton </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span> <br><span class="hljs-keyword">pass</span> <br><br>foo1 = Foo() <br>foo2 = Foo() <br><span class="hljs-built_in">print</span>(foo1 <span class="hljs-keyword">is</span> foo2) <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure></li><li><p>使用基类，重写<code>__new__</code>方法</p></li><li><p>使用元类，type + metaclass</p></li></ul><h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><p>搜索从父类所继承属性的操作是深度优先、从左至右、递归查找。 派生类方法覆盖重载基类</p><h4 id="Classmethod-staticmethod"><a href="#Classmethod-staticmethod" class="headerlink" title="Classmethod / staticmethod"></a>Classmethod / staticmethod</h4><p>​        <strong>相同</strong></p><ul><li><p>都不需要实例化，即可调用</p></li><li><p>类方法需要cls参数传入，静态函数则不用</p><p><strong>区别</strong></p></li><li><p>类函数可以当做作为类似<code>__new__</code>一样的构造函数，用来返回类对象</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Interview</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/2021/03/27/backend/MySQL/"/>
    <url>/2021/03/27/backend/MySQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 从不订购的客户<br>select a.Name as Customers  from Customers  a<br>left join Orders b on a.Id&#x3D;b.CustomerId <br>Where b.Id is null <br><br>select a.Name as &#96;Customers&#96;  from Customers  a<br>where id not in (select distinct CustomerId from Orders)<br><br><br># 总分前三的学生姓名<br>SELECT &#96;name&#96; from (<br>  SELECT b.&#96;name&#96;,SUM(a.score)<br>  from score a <br>  join student b on a.student_id&#x3D;b.id<br>  GROUP BY  b.&#96;name&#96;<br>  ORDER BY SUM(a.score) desc limit 3<br>) as t<br><br><br># 每门课成绩前五名<br>SELECT a.class,a.&#96;name&#96;,a.score from grade a <br>WHERE (SELECT COUNT(1) from grade b WHERE a.class&#x3D;b.class and  a.score &lt;b.score)&lt;5<br>ORDER BY class,score desc<br><br><br>SELECT a.class,a.&#96;name&#96;,a.score ,COUNT(b.score) as &quot;No&quot;   from grade a <br>left join  grade b on a.class&#x3D;b.class and a.score&lt; b.score<br>GROUP BY a.class,a.&#96;name&#96;,a.score<br>HAVING COUNT(b.score) &lt;5<br>ORDER BY a.class,a.score desc<br><br><br><br># 获取所有部门中当前员工薪水最高的相关信息<br>select r.dept_no,ss.emp_no,r.maxSalary from (<br>  select d.dept_no,max(s.salary)as maxSalary from dept_emp d,salaries s<br>  where d.emp_no&#x3D;s.emp_no<br>  group by d.dept_no<br>)as r,salaries ss,dept_emp dd<br>where r.maxSalary&#x3D;ss.salary and r.dept_no&#x3D;dd.dept_no and dd.emp_no&#x3D;ss.emp_no<br>order by r.dept_no asc<br><br><br><br><br></code></pre></td></tr></table></figure><blockquote><h4 id="为什么用id做主键？"><a href="#为什么用id做主键？" class="headerlink" title="为什么用id做主键？"></a><strong>为什么用id做主键</strong>？</h4></blockquote><ol><li>行内约定规范（例如阿里官方的java开发手册 id、create_time、update_time 是表的必备字段，其中id为主键）</li><li>可以唯一标识一行，</li><li>数据自增 id 是顺序的，可以保证索引树上的数据比较紧凑，有更高的空间利用率以及减少数据页的分裂合并等操作，提高效率。</li><li>空间占用相对较少 整型做主键，则只要4个字节 利于回表：先在二级索引查询到对应的主键值，然后根据主键再去聚簇索引里面取查询。其他的唯一索引例如手机号、身份证号作为主键等可能比较长 32</li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）</p><p>脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>数据库事务transanction正确执行的四个基本要素。ACID,原子性(Atomicity)、一致性(Correspondence)、隔离性(Isolation)、持久性(Durability)。</p><ul><li><p>原子性:整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p></li><li><p>一致性:在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p></li><li><p>隔离性:隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。</p></li><li><p>持久性:在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p></li><li><p>【<strong>脏读</strong>】读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</p></li><li><p>【<strong>不可重复读</strong>】读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</p></li><li><p>【幻读】可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</p></li><li><p>可串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p></li></ul><p>不可重复读指的是数据修改、幻读指的是数据增加不涉及修改</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。</p><p>MVCC只在 READ COMMITTED 和 REPEATABLE READ 两个隔离级别下工作。</p>]]></content>
    
    
    <categories>
      
      <category>Database</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/2021/03/27/backend/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/03/27/backend/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h3 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h3><p>​    硬件进行抽象和管理，对应用进行服务和管理</p><h3 id="进程线程"><a href="#进程线程" class="headerlink" title="进程线程"></a>进程线程</h3><ul><li><p><strong>进程</strong>：资源分配的基本单位，执行程序的实例。</p></li><li><p><strong>线程：</strong>cpu调度的基本单元，同进程下的线程共享资源。</p></li><li><p><strong>协程：</strong>协程是一种用户态的轻量级线程，协程程序主动控制切换，没有切换的开销，所以执行效率极高，。</p></li></ul><ul><li><strong>并发:</strong></li><li><strong>并行:</strong></li></ul><ul><li>微观上只有一个核心只能同时执行一个进程，</li><li>线程与同属一个进程的其他的<strong>线程共享</strong>进程所拥有的全部资源</li></ul><h4 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h4><p>​        新生、预备、阻塞、运行、终止</p><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><ol><li>管道( pipe )：<br>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>有名管道 (namedpipe) ：<br>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>信号量(semophore ) ：<br>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>消息队列( messagequeue ) ：<br>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>信号 (sinal ) ：<br>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li><li>共享内存(shared memory ) ：<br>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li><li>套接字(socket ) ：<br>套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同设备及其间的进程通信。</li></ol><p>​    </p><p>双工(Half Duplex)数据传输指数据可以在一个信号载体的两个方向上传输，但是不能同时传输</p><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><ol><li>锁机制：包括互斥锁、条件变量、读写锁<br>互斥锁提供了以排他方式防止数据结构被并发修改的方法。<br>读写锁允许多个线程同时读共享数据，而对写操作是互斥的。<br>条件变量可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。</li><li>信号量机制(Semaphore)：包括无名线程信号量和命名线程信号量</li><li>信号机制(Signal)：类似进程间的信号处理<br>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</li></ol><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>​    多个线程竞争有限数量的资源，自己持有某种资源又等待其他资源释放，一直在保持这种状态，称为死锁。</p><p>​    </p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2021/03/27/backend/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2021/03/27/backend/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h3 id="url解析返回"><a href="#url解析返回" class="headerlink" title="url解析返回"></a>url解析返回</h3><ol><li><p>ip解析:缓存(浏览器和操作系统)-/etc/hosts-根域名-顶级域名-权威(二级)域名</p></li><li><p>网络层 ip协议 arp协议 mac地址查询</p></li><li><p>传输层 TCP 连接：TCP 三次握手</p></li><li><p>应用层 HTTP 连接: 发送 HTTP 请求</p></li><li><p>cdn直接返回/非cdn服务器监听对应端口 处理请求</p></li><li><p>七层nginx负载均衡分发 静态页面直接返回 部分动态页面转发到服务器对应端口</p></li><li><p>k8s、docker监听端口处理</p></li><li><p>python网关服务器处理(ASGI/WSGI)  uWSGI/gunicorn/uvicorn</p></li><li><p>框架处理（flask/django/fastapi）解析http报文 </p></li><li><p>查询redis缓存/mysql</p></li><li><p>组装数据并返回 HTTP 报文 json/text/file返回</p></li><li><p>浏览器解析渲染页面/前端直接处理的json/xml数据</p></li><li><p>断开连接：TCP 四次挥手</p></li></ol><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><p>1.host里面找ip没有从dns里面找</p><p>2.请求ip地址 建立连接、nginx静态模板-&gt;WSGI服务器 gunicorn -&gt;flask web application -&gt; 返回</p><ul><li><strong>应用层</strong> FTP、DNS、Telnet、SMTP、HTTP</li><li>表示层  数据压缩，数据加密以及数据描述</li><li>会话层   DNS</li><li><strong>传输层</strong> tcp、udp</li><li><strong>网络层</strong> ip、ARP</li><li><strong>数据链路层</strong> PPP、FR、HDLC、VLAN、MAC  （网桥，交换机） </li><li><strong>物理层</strong> IEEE   （中继器，集线器，网关）</li></ul><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p><strong>即地址解析协议（Address Resolution Protocol）， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址</strong>。</p><p>基于功能来考虑，ARP是链路层协议；基于分层/包封装来考虑，ARP是网络层协议。</p><h3 id="Rpc-http区别"><a href="#Rpc-http区别" class="headerlink" title="Rpc/http区别"></a>Rpc/http区别</h3><p><strong>http</strong>:<strong>有用信息占比少</strong>，毕竟HTTP工作在第七层，包含了大量的HTTP头等信息。其次是<strong>效率低</strong>，还是因为第七层的缘故.</p><p>基于Restful的远程过程调用有着明显的缺点，主要是效率低、封装调用复杂。当存在大量的服务间调用时，这些缺点变得更为突出。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><h3 id="Tcp-三次握手"><a href="#Tcp-三次握手" class="headerlink" title="Tcp 三次握手"></a>Tcp <strong>三次握手</strong></h3><p>其中ACK报文是用来应答的，SYN报文是用来同步的</p><p><strong>作用</strong>：确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备</p><p>第一次、第二次不携带数据，防止恶意攻击</p><p> 第一次握手：<a href="">客户端</a>发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认； </p><p> 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态； </p><p> 第三次握手：<a href="">客户端</a>收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，<a href="">客户端</a>和服务器进入ESTABLISHED状态，完成三次握手。 </p><p> 握手过程中传送的包里不包含数据，三次握手完毕后，<a href="">客户端</a>与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。 </p><h3 id="Tcp四次挥手"><a href="#Tcp四次挥手" class="headerlink" title="Tcp四次挥手"></a>Tcp四次挥手</h3><p> 与建立连接的“三次握手”类似，断开一个TCP连接则需要“四次挥手”。 </p><p> 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。 </p><p> 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。<br> 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。<br> 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p> 在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的MAC若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表 中。 </p><p> 交换机工作于OSI参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过ARP协议学习它的MAC地址，保存成一张 ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不 能划分网络层广播，即广播域。 </p><p> 交换机被广泛应用于二层网络交换，俗称“二层交换机”。 </p><p> 交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在OSI七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。 </p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p> <strong>路由器</strong>（<strong>Router</strong>）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在OSI模型的第三层——即网络层，例如网际协议。 </p><p> <strong>路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。</strong> 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。 </p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p> <strong>网关</strong>（Gateway），<strong>网关</strong>顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。 </p><p> 在传统TCP/IP术语中，网络设备只分成两种，一种为网关（gateway），另一种为主机（host）。网关能在网络间转递数据包，但主机不能 转送数据包。在主机（又称终端系统，end system）中，数据包需经过TCP/IP四层协议处理，但是在网关（又称中介系 统，intermediate system）只需要到达网际层（Internet layer），决定路径之后就可以转送。在当时，网关 （gateway）与路由器（router）还没有区别。 </p><p> 在现代网络术语中，网关（gateway）与路由器（router）的定义不同。网关（gateway）能在不同协议间移动数据，而路由器（router）是在不同网络间移动数据，相当于传统所说的IP网关（IP gateway）。 </p><p> <strong>网关</strong>是连接两个网络的设备，对于语音网关来说，他可以连接PSTN网络和以太网，这就相当于VOIP，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过<strong>网关</strong>还原成模拟的电话信号，最后才能在电话机上听到。 </p><p> 对于以太网中的<strong>网关</strong>只能转发三层以上数据包，这一点和路由是一样的。而不同的是<strong>网关</strong>中并没有路由表，他只能按照预先设定的不同网段来进行转发。网关最重要的一点就是端口映射，子网内用户在外网看来只是外网的IP地址对应着不同的端口，这样看来就会保护子网内的用户。</p>]]></content>
    
    
    <categories>
      
      <category>ComputerScience</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis面试题</title>
    <link href="/2021/03/24/backend/Redis/"/>
    <url>/2021/03/24/backend/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h4 id="概述特性"><a href="#概述特性" class="headerlink" title="概述特性"></a>概述特性</h4><ul><li><blockquote><p><strong>Redis为什么这么快？</strong></p></blockquote><ol><li>Redis是单线程的，避免了多线程的上下文切换和并发控制开销；</li><li>Redis大部分操作时基于内存，读写数据不需要磁盘I/O，所以速度非常快；</li><li>Redis采用了I/O多路复用机制，提高了网络I/O并发性；</li><li>Redis提供高效的数据结构，如跳跃表 o(logn) 、哈希表 o(1)等；</li></ol></li></ul><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li><p><strong>String</strong> : 缓存、计数器、限速器、分布式锁、集群共享信息通用配置</p></li><li><p><strong>List</strong> : 消息队列、底层双向链表</p></li><li><p><strong>Set</strong> : 好友关系</p></li><li><p><strong>zset(SortSet)</strong> :排行榜</p></li><li><p><strong>Hash</strong> : </p></li><li><p><strong>Streams(流)</strong> :</p></li></ul><p><img src="https://static001.geekbang.org/resource/image/fb/f0/fb7e3612ddee8a0ea49b7c40673a0cf0.jpg" alt="img"></p><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><ul><li><p><strong>缓存</strong> string</p></li><li><p><strong>计数器</strong> string</p></li><li><p><strong>排行榜</strong>  Zset</p></li><li><p><strong>异步消息队列</strong> List</p></li><li><p><strong>分布式锁</strong> string  EX seconds | PX milliseconds</p></li><li><p><strong>共享信息、高频访问信息</strong> 如session</p></li><li><p><strong>集合关系</strong> 好友关系  Set</p></li></ul><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET key value [EX seconds | PX milliseconds]  [NX]<br></code></pre></td></tr></table></figure><p>分布式锁是由共享存储系统(redis就是其中一种)维护的变量，多个客户端可以向共享存储系统发送命令进行加锁或释放锁操作</p><ul><li>加锁包括了读取锁变量、检查锁变量值和设置锁变量值三个操作，但需要以原子操作的方式完成，所以，我们使用 SET 命令带上 NX 选项来实现加锁；</li><li>锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以，我们在 SET 命令执行时加上 EX/PX 选项，设置其过期时间；</li><li>锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，我们使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端。</li></ul><h4 id="持久化策略"><a href="#持久化策略" class="headerlink" title="持久化策略"></a>持久化策略</h4><ul><li><p><strong>RDB</strong>: 原理是将Reids在内存中的数据库记录定时dump到磁盘上的RDB持久化。</p><p>相对于大数据集，RDB的启动效率会更高。</p></li><li><p><strong>AOF</strong>: 原理是将Reids的操作日志以追加的方式写入文件。</p><p>通常文件更大、恢复更慢、牺牲部分性能换取更高的缓存一致性</p></li></ul><h4 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a><strong>架构模式</strong></h4><ul><li><p><strong>主从</strong></p><p>1对多，非高可用性</p></li><li><p><strong>哨兵</strong></p><p>监控从切换成主数据库，浪费资源</p></li><li><p><strong>集群</strong></p><p>分布式存储，至少需要三主三从</p></li></ul><h4 id="数据淘汰机制"><a href="#数据淘汰机制" class="headerlink" title="数据淘汰机制"></a>数据淘汰机制</h4><ul><li>volatile-lru 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</li><li>volatile-ttl 从已设置过期时间的数据集中挑选将要过期的数据淘汰</li><li>volatile-random 从已设置过期时间的数据集中任意选择数据淘汰</li><li>allkeys-lru 从所有数据集中挑选最近最少使用的数据淘汰</li><li>allkeys-random 从所有数据集中任意选择数据进行淘汰</li><li>noeviction 禁止驱逐数据</li></ul><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><strong>穿透</strong>:空值设置一个较短的缓存</li><li><strong>击穿</strong>(业务狭隘):热门缓存失效</li><li><strong>雪崩</strong>:短时间内缓存大量失效  时间后加随机值</li></ul><h3 id="缓存-1"><a href="#缓存-1" class="headerlink" title="缓存"></a>缓存</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p><strong>概念：</strong>当用户使用一个不存在的key进行查询时，缓存（redis）无法命中，需要访问数据库查询该数据，若数据库中没有数据，则不写入缓存（redis）中，这将导致不存在的数据每次请求都要去数据库查询，造成缓存穿透。</p><p><strong>解决办法：</strong></p><ol><li>使用布隆过滤器，通过bloomfilter.mightContain(key)来判断当前key是否命中。布隆过滤器原理：<a href="https://zhuanlan.zhihu.com/p/43263751">https://zhuanlan.zhihu.com/p/43263751</a></li><li>当数据库查询结果为空时，在redis中将key对应的value设置空值，并设置一个较短的过期时间。</li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存在同一时间内大量·键过期（失效），接着来的一大波请求瞬间都落在了数据库中导致连接异常。</p><p>解决方案：</p><p>1、也是像解决缓存穿透一样加锁排队，实现同上;</p><p>2、建立备份缓存，缓存A和缓存B，A设置超时时间，B不设值超时时间，先从A读缓存，A没有读B，并且更新A缓存和B缓存;</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
      <tag>Database</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
